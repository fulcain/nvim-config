# Functions
# Minify safe iife
snippet IIFE
	( () => { $0 })()
# Flow control
# if
snippet if "if (condition) { ... }"
	if (${1:true}) {
		${0:${VISUAL}}
	}
# if ... else
snippet ife "if (condition) { ... } else { ... }"
	if (${1:true}) {
		${0:${VISUAL}}

	} else {
		${2}
	}
# tertiary conditional
snippet ter Ternary: `condition ? true : false`
	$1 ? $2: $0
# switch
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4}
			break;
		${0}
		default:
			${2}
	}
snippet case "case 'xyz': ... break"
	case '${1:case}':
		${0:${VISUAL}}
		break;
snippet try "try { ... } catch(e) { ... }"
	try {
		${0:${VISUAL}}
	} catch (${1:e}) {
		throw ${1:e}
	}
# throw Error
snippet terr
	throw new Error('${1:error message}')

snippet wht "(true) { ... }"
	while (true) {
		${0:${VISUAL}}
	}
snippet do "do { ... } while (condition)"
	do {
		${0:${VISUAL}}
	} while ($1);
# For in loop
snippet cforin
	for (let ${1:prop} in ${2:object}) {
		${0:$2[$1]}
	}
# Documentation
# docstring
snippet /**
	/**
	 * ${0:description}
	 *
	 */
snippet @par
	@param {${1:type}} ${2:name} ${0:description}
snippet @ret
	@return {${1:type}} ${0:description}
# JSON.parse
snippet jsonp
	JSON.parse(${0:jstr});
# JSON.stringify
snippet jsons
	JSON.stringify(${0:object});
# DOM selectors
# Query selector
snippet qs
	${1:document}.querySelector('${2:CSS selector}',() =>{
		$0
	})
# Query selector all
snippet qsa
	${1:document}.querySelectorAll('${2:CSS selector}', ()=>{
	 	$0
	})
# Debugging
snippet cl "console.log"
	console.log(${0});
snippet cd "console.debug"
	console.debug(${0});
snippet ce "console.error"
	console.error(${0});
snippet cw "console.warn"
	console.warn(${0});
snippet ci "console.info"
	console.info(${0});
snippet ct "console.trace"
	console.trace(${0:label});
snippet ctime "console.time ... console.timeEnd"
	console.time("${1:label}");
	${0:${VISUAL}}
	console.timeEnd("$1");
snippet ctimestamp "console.timeStamp"
	console.timeStamp("${1:label}");
snippet ca "console.assert"
	console.assert(${1:expression}, ${0:obj});
snippet cclear "console.clear"
	console.clear();
snippet cdir "console.dir"
	console.dir(${0:obj});
snippet cdirx "console.dirxml"
	console.dirxml(${1:object});
snippet cgroup "console.group"
	console.group("${1:label}");
	${0:${VISUAL}}
	console.groupEnd();
snippet cgroupc "console.groupCollapsed"
	console.groupCollapsed("${1:label}");
	${0:${VISUAL}}
	console.groupEnd();
snippet cprof "console.profile"
	console.profile("${1:label}");
	${0:${VISUAL}}
	console.profileEnd();
snippet ctable "console.table"
	console.table(${1:"${2:value}"});
snippet clstr "console.log stringified"
	console.log(JSON.stringify(${0}, null, 2));
# Misc
# setTimeout function
snippet timeout
	setTimeout( () => {${0}}${2}, ${1:10});
snippet const
	const ${1} = ${0};
snippet let
	let ${1} = ${0};
snippet im "import xyz from 'xyz'"
	import ${1} from '${2:$1}';
snippet imas "import * as xyz from 'xyz'"
	import * as ${1} from '${2:$1}';
snippet imm "import { member } from 'xyz'"
	import { ${1} } from '${2}';
snippet cla
	class ${1} {
		${0:${VISUAL}}
	}
snippet clax
	class ${1} extends ${2} {
		${0:${VISUAL}}
	}
snippet clac
	class ${1} {
		constructor(${2}) {
			${0:${VISUAL}}
		}
	}
snippet cforof "for (const prop of object}) { ... }"
	for (const ${1:prop} of ${2:object}) {
		${0:$1}
	}
snippet cfor "for (let prop of object}) { ... }"
	for (let ${1:prop} of ${2:object}) {
		${0:$1}
	}
snippet af 
	const ${1:function_name} = (${2}) => {
		${0:${VISUAL}}
	}

snippet afe 
	const ${1:function_name} = (${2}) => {
		${0:${VISUAL}}
	}

	export default ${1:function_name}

snippet aaf
	const ${1:function_name} = async (${2}) => {
		${0:${VISUAL}}
	}

snippet aafe
	const ${1:function_name} = async (${2}) => {
		${0:${VISUAL}}
	}

	export default ${1:function_name}
snippet =>
	(${1}) => {
		${0:${VISUAL}}
	}

snippet afb "() => {}"
	(${1}) => {
		${0:${VISUAL}}
	}
snippet ed
	export default ${0}
snippet ${
	\${${1}}${0}
snippet as "async"
	async ${0}
snippet aw "await"
	await ${0:${VISUAL}}
