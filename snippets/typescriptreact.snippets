# Import
snippet ir import React
	import React from 'react';

snippet irc import React and Component
	import React, { Component } from 'react';

snippet irh import React hooks
	import { use$1 } from 'react';

snippet ird import ReactDOM
	import ReactDOM from 'react-dom';

snippet irp import PropTypes
	import PropTypes from 'prop-types';

# Lifecycle Methods
snippet cdm componentDidMount
	componentDidMount() {
		${1}
	};

snippet cdup componentDidUpdate
	componentDidUpdate(prevProps, prevState) {
		${1}
	};

snippet cwm componentWillMount
	componentWillMount() {
		${1}
	};

snippet cwr componentWillReceiveProps
	componentWillReceiveProps(nextProps) {
		${1}
	};

snippet cwun componentWillUnmount
	componentWillUnmount() {
		${1}
	};

snippet cwu componentWillUpdate
	componentWillUpdate(nextProps, nextState) {
		${1}
	};

snippet scu shouldComponentUpdate
	shouldComponentUpdate(nextProps, nextState) {
		${1}
	}

# Props
snippet spt static propTypes
	static propTypes = {
		${1}: PropTypes.${2}
	};

snippet pt propTypes
	${1}.propTypes = {
		${2}: PropTypes.${2}
	};

snippet sdp static defaultProps
	static defaultProps = {
		${1}: ${2}	
	};

snippet dp defaultProps
	${1}.defaultProps = {
		${2}: ${3}
	};

snippet pp props
	props.${1};

snippet tp this props
	this.props.${1};

# State
snippet st
	state = {
		${1}: ${2},
	};

snippet sst
	this.setState({
		${1}: ${2}
	});

snippet tst 
	this.state.${1};

# Component
snippet raf
	const ${1:ComponentName} = (${2:props}) => {
		${3:state}

		return (
			<>
				${4}
			</>
		);
	};

snippet rcla
	class ${1:ClassName} extends Component {
		render() {
			return (
				<>
					${2}
				</>
			);
		}
	}

snippet ercla
	export default class ${1:ClassName} extends Component {
		render() {
			return (
				<>
					${2}
				</>
			);
		};
	};

snippet ctor
	constructor() {
		super();

		${1:state}
	}

snippet ren
	render() {
		return (
			<>
				${2}
			</>
		);
	}

snippet fup
	forceUpdate(${1:callback});

# Hooks
snippet uses useState
	const [${1:state}, set${2}] = useState(${3:initialState});

snippet usee useEffect
	useEffect(() => {
		${1}
	});

snippet userd useReducer
	const [${1:state}, ${2:dispatch}] = useReducer(${3:reducer});

snippet userf useRef
	const ${1:refContainer} = useRef(${2:initialValue});

snippet usect useContext
	const ${1:value} = useContext(${2:MyContext});

snippet usecb useCallback
	const ${1:memoizedCallback} = useCallback(
	() => {
		${2}(${3})
	},
	[$3]
	);

snippet usem useMemo
	const ${1:memoizedCallback} = useMemo(() => ${2}(${3}), [$3]);

snippet usei useImperativeHandle
	useImperativeHandle(${1:ref}, ${2:createHandle});

snippet used useDebugValue
	useDebugValue(${1:value});

# ReactDOM methods
snippet rdr ReactDOM.render
	ReactDOM.render(${1}, ${2});

snippet rdh ReactDOM.hydrate
	ReactDOM.hydrate(${1:element}, ${2:container}[, ${3:callback}]);

snippet rdcp ReactDOM.createPortal
	ReactDOM.createPortal(${1:child}, ${2:container});

# Functions
# Minify safe iife
snippet IIFE
	( () => { $0 })()

# Flow control

# if
snippet if "if (condition) { ... }"
	if (${1:true}) {
		${0:${VISUAL}}
	}

# tertiary conditional
snippet ter Ternary: `condition ? true : false`
	$1 ? $2: $0

snippet try "try { ... } catch(e) { ... }"
	try {
		${0:${VISUAL}}
	} catch (${1:err}) {
		throw ${1:err}
	}

# For in loop
snippet cforin
	for (let ${1:prop} in ${2:object}) {
		${0:$2[$1]}
	}

# Documentation
# docstring
snippet /**
	/**
	 * ${0:description}
	 *
	 */

snippet @par
	@param {${1:type}} ${2:name} ${0:description}

snippet @ret
	@return {${1:type}} ${0:description}

# DOM selectors
# Query selector
snippet qs
	${1:document}.querySelector('${2:CSS selector}');

# Query selector all
snippet qsa
	${1:document}.querySelectorAll('${2:CSS selector}', ()=>{
	 	$0
	})
# Debugging
snippet cl "console.log"
	console.log(${0});

snippet ci "console.info"
	console.info(${0});

snippet ct "console.trace"
	console.trace(${0:label});

snippet cprof "console.profile"
	console.profile("${1:label}");
	${0:${VISUAL}}
	console.profileEnd();
# Misc
# setTimeout function
snippet setTimeout
	setTimeout( () => {${0}}${2}, ${1:10});

snippet const
	const ${1} = ${0};

snippet let
	let ${1} = ${0};

snippet im "import xyz from 'xyz'"
	import ${1} from '${2:$1}';
	
snippet class
	class ${1} {
		constructor(${2}) {
			${0:${VISUAL}}
		}
	}

snippet cforof "for (const prop of object}) { ... }"
	for (const ${1:prop} of ${2:object}) {
		${0:$1}
	}

snippet cfor "for (const prop of object}) { ... }"
	for (let ${1:prop} of ${2:object}) {
		${0:$1}
	}

snippet af 
	const ${1:function_name} = (${2}) => {
		${0:${VISUAL}}
	}

snippet afe 
	const ${1:function_name} = (${2}) => {
		${0:${VISUAL}}
	}

	export default ${1:function_name}

snippet aaf
	const ${1:function_name} = async (${2}) => {
		${0:${VISUAL}}
	}

snippet aafe
	const ${1:function_name} = async (${2}) => {
		${0:${VISUAL}}
	}

	export default ${1:function_name}

snippet ed
	export default ${0}


snippet edf 
	export default function ${1:functionName}(){
		return (
			<>
				${2}
			</>
		);
	};

