# Functions
# Minify safe iife
snippet IIFE
	( () => { $0 })()

# Flow control

# if
snippet if "if (condition) { ... }"
	if (${1:true}) {
		${0:${VISUAL}}
	}

# tertiary conditional
snippet ter Ternary: `condition ? true : false`
	$1 ? $2: $0

snippet try "try { ... } catch(e) { ... }"
	try {
		${0:${VISUAL}}
	} catch (${1:err}) {
		throw ${1:err}
	}

# For in loopp
snippet cforin
	for (let ${1:prop} in ${2:object}) {
		${0:$2[$1]}
	}

# Documentation
# docstring
snippet /**
	/**
	 * ${0:description}
	 *
	 */

snippet @par
	@param {${1:type}} ${2:name} ${0:description}

snippet @ret
	@return {${1:type}} ${0:description}

# DOM selectors
# Query selector
snippet qs
	${1:document}.querySelector('${2:CSS selector}');

# Query selector all
snippet qsa
	${1:document}.querySelectorAll('${2:CSS selector}');
# Debugging
snippet cl "console.log"
	console.log(${0});

snippet ci "console.info"
	console.info(${0});

snippet ct "console.trace"
	console.trace(${0:label});

snippet cprof "console.profile"
	console.profile("${1:label}");
	${0:${VISUAL}}
	console.profileEnd();
# Misc
# setTimeout function
snippet setTimeout
	setTimeout( () => {${0}}${2}, ${1:10});

snippet const
	const ${1} = ${0};

snippet let
	let ${1} = ${0};

snippet im "import xyz from 'xyz'"
	import ${1} from '${2:$1}';
	
snippet class
	class ${1} {
		constructor(${2}) {
			${0:${VISUAL}}
		}
	}

snippet cforof "for (const prop of object}) { ... }"
	for (const ${1:prop} of ${2:object}) {
		${0:$1}
	}

snippet cfor "for (const prop of object}) { ... }"
	for (let ${1:prop} of ${2:object}) {
		${0:$1}
	}

snippet af 
	const ${1:function_name} = (${2}) => {
		${0:${VISUAL}}
	}

snippet afe 
	const ${1:function_name} = (${2}) => {
		${0:${VISUAL}}
	}

	export default ${1:function_name}

snippet aaf
	const ${1:function_name} = async (${2}) => {
		${0:${VISUAL}}
	}

snippet aafe
	const ${1:function_name} = async (${2}) => {
		${0:${VISUAL}}
	}

	export default ${1:function_name}

snippet ed
	export default ${0}
